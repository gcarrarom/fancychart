{{- $app_name := .Release.Name }}
{{- $app_port := .Values.port }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $app_name }}
spec:
  replicas: 1
  {{- if .Values.recreate }}
  strategy:
    type: Recreate
  {{- end }}
  selector:
    matchLabels:
      app: {{ $app_name }}
  template:
    metadata:
      labels:
        app: {{ $app_name }}
    spec:
      {{- if not (eq (len .Values.volumes) 0) }}
      volumes:
        {{- range $each := .Values.volumes }}
        {{- if $each.isNfs }}
        - name: {{ $each.name }}
          nfs:
            path: {{ $each.nfsPath }}
            server: {{ $each.server }}
        {{- else}}
        - name: {{$each.name}}
          persistentVolumeClaim:
            claimName: {{$each.name}}
        {{- end }}
        {{- end }}
      {{- end }}
      {{- if not (eq (len .Values.image.pullSecrets) 0) }}
      imagePullSecrets:
      {{- range $each := .Values.image.pullSecrets }}
      - name: {{ $each }}
      {{- end}}
      {{- end }}
      containers:
      - name: {{ $app_name }}
        image: {{ .Values.image.repo }}:{{ .Values.image.tag }}
        resources:
        {{- range $key, $value := .Values.resources }}
          {{$key}}:
          {{- range $sub_key, $sub_value := $value}}
            {{$sub_key}}: {{$sub_value}}
          {{- end}}
        {{- end }}
        {{- if or (not (eq (len .Values.env) 0)) (not (eq (len .Values.envFromSecret) 0)) }}
        envFrom:
        {{- range $item := .Values.envFromSecret }}
        {{- if $item.secretRef }}
        - secretRef:
            name: {{$item.secretName}}
        {{- end }}
        {{- end }}
        env:
        {{- range $key, $val := .Values.env }}
        - name: {{$key}}
          value: {{$val | quote}}
        {{- end }}
        {{- range $item := .Values.envFromSecret }}
        {{- if not $item.secretRef }}
        - name: {{$item.name}}
          valueFrom:
            secretKeyRef:
              name: {{$item.secretName}}
              key: {{$item.key}}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if not (eq (len .Values.volumes) 0) }}
        volumeMounts:
        {{- range $each := .Values.volumes }}
        - mountPath: {{$each.path}}
          name: {{$each.name}}
        {{- end }}
        {{- end }}
        ports:
        - containerPort: {{ $app_port }}
---
{{- if .Values.service.enabled }}
kind: Service
apiVersion: v1
metadata:
  name:  {{ $app_name }}
spec:
  selector:
    app: {{ $app_name }}
  type:  ClusterIP
  ports:
  - port:  {{ $app_port }}
    targetPort:  {{ $app_port }}
{{- end }}
---
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $app_name }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.clusterissuer }}
    {{- range $key, $value := .Values.ingress.annotations }}
    {{ $key }}: {{ $value | quote}}
    {{- end }}
spec:
  ingressClassName: nginx
  rules:
  - host: {{ if .Values.url }}{{ .Values.url }}{{ else }}{{ $app_name }}.{{ .Values.domain }}{{ end }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ $app_name }}
            port:
              number: {{ $app_port }}
  tls:
  - hosts:
    - {{ if .Values.url }}{{ .Values.url }}{{ else }}{{ $app_name }}.{{ .Values.domain }}{{ end }}
    secretName: {{ if .Values.url }}{{ .Values.url | replace "." "-" }}{{ else }}{{ $app_name }}-{{ .Values.domain | replace "." "-" }}{{ end }}
{{- end }}